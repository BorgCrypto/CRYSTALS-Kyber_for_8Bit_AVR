#include "Curve25519KEM.h"
#include "print.h"
#include <string.h>
#include "RNG.h"
#include "avr.h"
void  static_test_KEM_Curve25519();
void  random_test_KEM_Curve25519();

int main()
{ RNG.begin("Test");  
  static_test_KEM_Curve25519();
  random_test_KEM_Curve25519();
  avr_end();
    return 0;
}

void static_test_KEM_Curve25519() {
  //Test values FROM RFC 9180 Base Setup Information: DHKEM(X25519, HKDF-SHA256)
  uint8_t ephemeral_secret_key[32] = {0x50, 0xc4, 0xa7, 0x58, 0xa8, 0x02, 0xcd, 0x8b, 0x93, 0x6e, 0xce, 0xea, 0x31, 0x44, 0x32, 0x79, 0x8d, 0x5b, 0xaf, 0x2d, 0x7e, 0x92, 0x35, 0xdc, 0x08, 0x4a, 0xb1, 0xb9, 0xcf, 0xa2, 0xf7, 0x76};
  uint8_t shared_secret[32] = { 0xfe, 0x0e, 0x18, 0xc9, 0xf0, 0x24, 0xce, 0x43, 0x79, 0x9a, 0xe3, 0x93, 0xc7, 0xe8, 0xfe, 0x8f, 0xce, 0x9d, 0x21, 0x88, 0x75, 0xe8, 0x22, 0x7b, 0x01, 0x87, 0xc0, 0x4e, 0x7d, 0x2e, 0xa1, 0xfc };
  uint8_t static_public_key[32] = { 0x39, 0x48, 0xcf, 0xe0, 0xad, 0x1d, 0xdb, 0x69, 0x5d, 0x78, 0x0e, 0x59, 0x07, 0x71, 0x95, 0xda, 0x6c, 0x56, 0x50, 0x6b, 0x02, 0x73, 0x29, 0x79, 0x4a, 0xb0, 0x2b, 0xca, 0x80, 0x81, 0x5c, 0x4d };
  uint8_t static_secret_key[32] = { 0x40, 0x12, 0xc5, 0x50, 0x26, 0x3f, 0xc8, 0xad, 0x58, 0x37, 0x5d, 0xf3, 0xf5, 0x57, 0xaa, 0xc5, 0x31, 0xd2, 0x68, 0x50, 0x90, 0x3e, 0x55, 0xa9, 0xf2, 0x3f, 0x21, 0xd8, 0x53, 0x4e, 0x8a, 0x48 };
  uint8_t enc[32] = { 0x37, 0xfd, 0xa3, 0x56, 0x7b, 0xdb, 0xd6, 0x28, 0xe8, 0x86, 0x68, 0xc3, 0xc8, 0xd7, 0xe9, 0x7d, 0x1d, 0x12, 0x53, 0xb6, 0xd4, 0xea, 0x6d, 0x44, 0xc1, 0x50, 0xf7, 0x41, 0xf1, 0xbf, 0x44, 0x31 };
  uint8_t shared_secret_test_encap[32];
  uint8_t shared_secret_test_decap[32];
  uint8_t enc_test[32];  //returned ephemeral public key
  print("Starting static test with Test-Values.\n");
  Curve25519KEM::encap(shared_secret_test_encap, enc_test, static_public_key,ephemeral_secret_key); 
  if ((memcmp(enc_test, enc, 32) == 0) && (memcmp(shared_secret_test_encap, shared_secret, 32) == 0)) {
    print("Encap erfolgreich.\n");
  } else {
    print("Encap fehlgeschalgen.\n");
  }
  Curve25519KEM::decap(shared_secret_test_decap, enc_test, static_secret_key);
  if ((memcmp(shared_secret_test_decap, shared_secret, 32) == 0)) {
    print("Decap erfolgreich.\n");
  } else {
    print("Decap fehlgeschalgen.\n");
  }
}

void random_test_KEM_Curve25519(){
    uint8_t static_public_key[32];
    uint8_t static_secret_key[32];
    uint8_t enc[32]; //ephemeral public key
    uint8_t shared_secret_a[32];    
    uint8_t shared_secret_b[32];
    print("Starting test with random values.\n"); 
    Curve25519KEM::keyGen(static_public_key,static_secret_key);   
    Curve25519KEM::encap(shared_secret_a,enc,static_public_key,0);
    Curve25519KEM::decap(shared_secret_b, enc, static_secret_key);
    if(memcmp(shared_secret_a,shared_secret_b,32)==0){
      print("KEM was successful.\n"); 
    }else{
      print("KEM was NOT successful.\n");
    }
}
