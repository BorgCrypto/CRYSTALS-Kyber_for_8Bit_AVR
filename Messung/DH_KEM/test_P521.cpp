#include <P521KEM.h>
#include "print.h"
#include <string.h>
#include "RNG.h"
#include "avr.h"
void  static_test_KEM_P521();
void  dynamic_test_KEM_P521();

int main(int argc, char const *argv[])
{
    static_test_KEM_P521();
    dynamic_test_KEM_P521();
    avr_end();
    return 0;
}

void static_test_KEM_P521() {
  uint8_t static_public_key[133] = { 0x04, 0x01, 0xb4, 0x54, 0x98, 0xc1, 0x71, 0x4e, 0x2d, 0xce, 0x16, 0x7d, 0x3c, 0xaf, 0x16, 0x2e, 0x45, 0xe0, 0x64, 0x2a, 0xfc, 0x7e, 0xd4, 0x35, 0xdf, 0x79, 0x02, 0xcc, 0xae, 0x0e, 0x84, 0xba, 0x0f, 0x7d, 0x37, 0x3f, 0x64, 0x6b, 0x77, 0x38, 0xbb, 0xbd, 0xca, 0x11, 0xed, 0x91, 0xbd, 0xea, 0xe3, 0xcd, 0xcb, 0xa3, 0x30, 0x1f, 0x24, 0x57, 0xbe, 0x45, 0x2f, 0x27, 0x1f, 0xa6, 0x83, 0x75, 0x80, 0xe6, 0x61, 0x01, 0x2a, 0xf4, 0x95, 0x83, 0xa6, 0x2e, 0x48, 0xd4, 0x4b, 0xed, 0x35, 0x0c, 0x71, 0x18, 0xc0, 0xd8, 0xdc, 0x86, 0x1c, 0x23, 0x8c, 0x72, 0xa2, 0xbd, 0xa1, 0x7f, 0x64, 0x70, 0x4f, 0x46, 0x4b, 0x57, 0x33, 0x8e, 0x7f, 0x40, 0xb6, 0x09, 0x59, 0x48, 0x0c, 0x0e, 0x58, 0xe6, 0x55, 0x9b, 0x19, 0x0d, 0x81, 0x66, 0x3e, 0xd8, 0x16, 0xe5, 0x23, 0xb6, 0xb6, 0xa4, 0x18, 0xf6, 0x6d, 0x24, 0x51, 0xec, 0x64 };
  uint8_t static_secret_key[66] = { 0x01, 0x46, 0x26, 0x80, 0x36, 0x9a, 0xe3, 0x75, 0xe4, 0xb3, 0x79, 0x10, 0x70, 0xa7, 0x45, 0x8e, 0xd5, 0x27, 0x84, 0x2f, 0x6a, 0x98, 0xa7, 0x9f, 0xf5, 0xe0, 0xd4, 0xcb, 0xde, 0x83, 0xc2, 0x71, 0x96, 0xa3, 0x91, 0x69, 0x56, 0x65, 0x55, 0x23, 0xa6, 0xa2, 0x55, 0x6a, 0x7a, 0xf6, 0x2c, 0x5c, 0xad, 0xab, 0xe2, 0xef, 0x9d, 0xa3, 0x76, 0x0b, 0xb2, 0x1e, 0x00, 0x52, 0x02, 0xf7, 0xb2, 0x46, 0x28, 0x47 };
  uint8_t shared_secret[64] = { 0x77, 0x6a, 0xb4, 0x21, 0x30, 0x2f, 0x6e, 0xff, 0x7d, 0x7c, 0xb5, 0xcb, 0x1a, 0xda, 0xea, 0x0c, 0xd5, 0x08, 0x72, 0xc7, 0x1c, 0x2d, 0x63, 0xc3, 0x0c, 0x4f, 0x1d, 0x5e, 0x43, 0x65, 0x33, 0x36, 0xfe, 0xf3, 0x3b, 0x10, 0x3c, 0x67, 0xe7, 0xa9, 0x8a, 0xdd, 0x2d, 0x3b, 0x66, 0xe2, 0xfd, 0xa9, 0x5b, 0x5b, 0x2a, 0x66, 0x7a, 0xa9, 0xda, 0xc7, 0xe5, 0x9c, 0xc1, 0xd4, 0x6d, 0x30, 0xe8, 0x18 };
  uint8_t ephemeral_public_key[133] = { 0x04, 0x01, 0x38, 0xb3, 0x85, 0xca, 0x16, 0xbb, 0x0d, 0x5f, 0xa0, 0xc0, 0x66, 0x5f, 0xbb, 0xd7, 0xe6, 0x9e, 0x3e, 0xe2, 0x9f, 0x63, 0x99, 0x1d, 0x3e, 0x9b, 0x5f, 0xa7, 0x40, 0xaa, 0xb8, 0x90, 0x0a, 0xae, 0xed, 0x46, 0xed, 0x73, 0xa4, 0x90, 0x55, 0x75, 0x84, 0x25, 0xa0, 0xce, 0x36, 0x50, 0x7c, 0x54, 0xb2, 0x9c, 0xc5, 0xb8, 0x5a, 0x5c, 0xee, 0x6b, 0xae, 0x0c, 0xf1, 0xc2, 0x1f, 0x27, 0x31, 0xec, 0xe2, 0x01, 0x3d, 0xc3, 0xfb, 0x7c, 0x8d, 0x21, 0x65, 0x4b, 0xb1, 0x61, 0xb4, 0x63, 0x96, 0x2c, 0xa1, 0x9e, 0x8c, 0x65, 0x4f, 0xf2, 0x4c, 0x94, 0xdd, 0x28, 0x98, 0xde, 0x12, 0x05, 0x1f, 0x1e, 0xd0, 0x69, 0x22, 0x37, 0xfb, 0x02, 0xb2, 0xf8, 0xd1, 0xdc, 0x1c, 0x73, 0xe9, 0xb3, 0x66, 0xb5, 0x29, 0xeb, 0x43, 0x6e, 0x98, 0xa9, 0x96, 0xee, 0x52, 0x2a, 0xef, 0x86, 0x3d, 0xd5, 0x73, 0x9d, 0x2f, 0x29, 0xb0 };
  uint8_t enc[133];
  uint8_t shared_secret_test[64];
  uint8_t eph_secret_key[66] = { 0x01, 0x47, 0x84, 0xc6, 0x92, 0xda, 0x35, 0xdf, 0x6e, 0xcd, 0xe9, 0x8e, 0xe4, 0x3a, 0xc4, 0x25, 0xdb, 0xdd, 0x09, 0x69, 0xc0, 0xc7, 0x2b, 0x42, 0xf2, 0xe7, 0x08, 0xab, 0x9d, 0x53, 0x54, 0x15, 0xa8, 0x56, 0x9b, 0xda, 0xcf, 0xcc, 0x0a, 0x11, 0x4c, 0x85, 0xb8, 0xe3, 0xf2, 0x6a, 0xcf, 0x4d, 0x68, 0x11, 0x5f, 0x8c, 0x91, 0xa6, 0x61, 0x78, 0xcd, 0xbd, 0x03, 0xb7, 0xbc, 0xc5, 0x29, 0x1e, 0x37, 0x4b };
  print("Starting static test with Test-Values.\n");
  P521KEM::encap(shared_secret_test, enc, static_public_key + 1,eph_secret_key);
  if ((memcmp(enc, ephemeral_public_key, 133) == 0) && memcmp(shared_secret_test, shared_secret, 64) == 0) {
    print("Enc was successful.\n");
  } else {
    print("Enc was NOT successful.");
  }

  uint8_t shared_secret_test_decap[64];
  P521KEM::decap(shared_secret_test_decap, enc, static_secret_key);
  if ((memcmp(shared_secret_test_decap, shared_secret, 64) == 0)) {
    print("Decap was successful.\n");
  } else {
    print("Decap was NOT successful.");
  }
}


void dynamic_test_KEM_P521() {
  uint8_t static_public_key[132]; //without serialization indicator
  uint8_t static_secret_key[66];
  uint8_t enc[133];
  uint8_t shared_secret_a[64];
  uint8_t shared_secret_b[64];

  print("Starting test with random values.\n"); 
  P521KEM::keyGen(static_public_key,static_secret_key);
  P521KEM::encap(shared_secret_a,enc,static_public_key,0);
  P521KEM::decap(shared_secret_b,enc,static_secret_key);

  if(memcmp(shared_secret_a,shared_secret_b,64)==0){
    print("KEM was successful.\n");    
  }else{
   print("KEM was NOT successful."); 
  }
}